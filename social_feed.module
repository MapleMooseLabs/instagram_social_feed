<?php

/**
 * @file
 * Defines all hooks and helper functions.
 */

/**
* Implementation of hook_menu()
*/
function social_feed_menu() {

  $items['admin/config/services/social_feed'] = array(
    'title' => 'Social Aggregator',
    'description' => 'Approve new items for site display',
    'page callback' => 'social_overview',
    'access arguments' => array('administer social_feed settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/social_feed/tab1'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['admin/config/services/social_feed/settings'] = array(
    'title' => 'Manage settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_feed_settings'),
    'access arguments' => array('administer social_feed settings'),
  );

  $items['admin/config/services/social_feed/status'] = array(
    'title' => 'Status',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_status'),
    'access arguments' => array('administer social_feed settings'),
  );

  $items['ajax/social_approve'] = array(
    'title' => 'Social Approve',
    'page callback' => 'social_feed_approve',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permissions().
 */
function social_feed_permission() {
  return array(
    'administer social_feed settings' => array(
      'title' => t('Administer Social Feed module settings'),
    ),
  );
}

/**
 * Callback function for Instagram display table.
 */
function social_overview() {

  drupal_add_js(drupal_get_path('module', 'social_feed') . '/js/social_feed.js');

  $sql = "SELECT * from social_instagram ORDER BY instagram_id DESC";
  $result = db_query($sql);

  $header = array('Thumbnail', 'User', 'Caption', 'Timestamp', 'Publish?');

  $rows = array();
  foreach ($result as $row) {

    $image_html = '<img src="' . $row->thumbnail . '" data-approved="' . $row->approve . '" />';

    $rows[] = array(
      l($image_html, $row->instagram_link, array(
        'html' => TRUE,
        'attributes' => array(
          'target' => '_blank')
        )
      ),
      l($row->instagram_user, 'http://instagram.com/' . $row->instagram_user, array(
        'attributes' => array(
          'target' => '_blank')
        )
      ),
      truncate_utf8($row->caption, 80, FALSE, TRUE),
      date('Y-m-d g:i a', $row->time),
      $row->instagram_id,
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => FALSE,
    'empty' => 'No photos yet',
  );
  return theme_table($variables);

}

/**
 * AJAX callback for approving individual photos.
 */
function social_feed_approve($id) {

  $table = "";
  $column = "";

  if (isset($_GET['instagram_id'])) {
    $id = $_GET['instagram_id'];
    $table = "social_instagram";
    $column = "instagram_id";
  }
  else {
    header("HTTP/1.1 500 Internal Server Error");
    exit();
  }

  $result = db_update($table)
    ->expression(
      'approve', 'IF(approve=1, 0, 1)'
    )
    ->condition(
      $column, $id
    )
    ->execute();

}

/**
 * Send query to make CURL request to API.
 */
function api_call($query) {
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $query);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($curl, CURLOPT_TIMEOUT, 20);
  $result= curl_exec($curl);
  curl_close($curl);

  return $result;
}

/**
 * Implements hook_cron().
 */
function social_feed_cron() {

  $access_token = variable_get('social_feed_api_key', '30805250.1fb234f.27a3c29a8e8545caa31a7be52462c2fa');

  $text = variable_get('social_feed_search_tag', 'nofilter');
  $text = str_replace('#', '', $text);
  $type = variable_get('social_feed_search_type', 'Hashtag');

  if ($type == 1) {
    // Hashtag search.
    $instagram_query = "https://api.instagram.com/v1/tags/$text/media/recent?access_token=$access_token";
    $text = "Instagram feed: hashtag " . $text;
  }
  elseif ($type == 0) {
    // User feed.
    $instagram_query = "https://api.instagram.com/v1/users/self/feed?access_token=$access_token";
    $text = "Instagram feed: user feed";
  }
  else {
    //User photos.
    $uid = variable_get('social_feed_user_id', 0);
    $instagram_query = "https://api.instagram.com/v1/users/" . $uid . "/media/recent?access_token=$access_token";
    $text = "Instagram feed: user's own photos";
  }

  $total = 0;
  $instagram_feed = json_decode(api_call($instagram_query));

  $table = 'social_instagram';
  if (!isset($instagram_feed->data)) {
    drupal_set_message($text . ' no items found.');
    return;
  }
  foreach ($instagram_feed->data as $feed) {
     // Check if instagram photo already exists based on unix timestamp.
     $sql = "SELECT instagram_id FROM {$table} WHERE instagram_id = '{$feed->id}'";
     $result = db_query($sql);
     $count = $result->rowCount();

     // Comma deliminate hashtag array and return as string.
     $tags = implode(",", $feed->tags);

      // If no duplicate time entries proceed.
      if ($count < 1) {

        $caption = '';
        if (isset($feed->caption->text)) {
          $caption = utf8_encode($feed->caption->text);
        }

        $data = array(
          'user_id' => $feed->user->id,
          'tags' => $tags,
          // Time stored in unix epoch format.
          'time' => REQUEST_TIME,
          'low_resolution' => $feed->images->low_resolution->url,
          'thumbnail' => $feed->images->thumbnail->url,
          'standard_resolution' => $feed->images->standard_resolution->url,
          'caption' => $caption,
          'instagram_id' => $feed->id,
          'instagram_link' => $feed->link,
          'instagram_user' => $feed->user->username,
          'approve' => variable_get('social_feed_auto_publish'),
        );

        // Insert data into table.
        $result = db_insert($table)->fields($data)->execute();
        $total++;
      }
   }

   drupal_set_message($text . " " . $total . " items imported.");

}

/**
 * Callback function for settings form.
 */
function social_feed_settings() {

  // Access token request in process.
  if (isset($_GET['code'])) {

    $url = "https://api.instagram.com/oauth/access_token";
    $fields = array(
      "client_id" => variable_get("social_feed_client_id"),
      "client_secret" => variable_get("social_feed_client_secret"),
      "grant_type" => "authorization_code",
      "redirect_uri" => variable_get("social_feed_redirect_uri"),
      "code" => $_GET['code'],
    );

    foreach ($fields as $key => $value) {
      $fields_string .= $key . '=' . $value . '&';
    }
    rtrim($fields_string, '&');

    // Request access token.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, count($fields));
    curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);

    $output = curl_exec($ch);
    curl_close($ch);

    $auth = json_decode($output);

    variable_set('social_feed_api_key', $auth->access_token);
    variable_set('social_feed_user_id', $auth->user->id);
    variable_set('social_feed_username', $auth->user->username);

  }

  $form = array();

  $access_key = variable_get('social_feed_api_key', '');
  if ($access_key == '') {

    // Non-authenticated settings form.
    $form['social_feed_client_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram Client ID'),
      '#default_value' => variable_get('social_feed_client_id', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => t('You must register an Instagram client key to use this module. You can register a client by <a href="http://instagram.com/developer/clients/manage/" target="_blank">clicking here</a>.'),
    );
    $form['social_feed_client_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram Client Secret'),
      '#default_value' => variable_get('social_feed_client_secret', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => 'The client secret can be found after creating an Instagram client in the API console.',
    );
    $form['social_feed_redirect_uri'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram Redirect URI'),
      '#default_value' => variable_get('social_feed_redirect_uri', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => 'Set the redirect URI to http://' . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'],
    );

    if (variable_get('social_feed_client_id', '') != '' && variable_get('social_feed_redirect_uri', '') != '') {
      $form['authenticate'] = array(
        '#markup' => l('Click here to authenticate via Instagram and create an access token',
          'https://api.instagram.com/oauth/authorize/?client_id=' . variable_get('social_feed_client_id') . '&redirect_uri=' . variable_get('social_feed_redirect_uri') . '&response_type=code'
        )
      );
    }
  }
  else {

    // Authenticated user settings form.
    $form['social_feed_api_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram API Key'),
      '#default_value' => variable_get('social_feed_api_key', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#disabled' => TRUE,
      '#description' => 'Stored access key for accessing the API key',
    );
    $form['authenticate'] = array(
      '#markup' => l('Click here to remove the access key and re-authenticate via Instgram',
        'admin/config/services/social_feed/settings/', array(
          'query' => array('code' => '')
        )
      )
    );
    $form['spacer'] = array(
      '#markup' => '<p></p>',
    );
    $form['social_feed_auto_publish'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto-publish new photos'),
      '#default_value' => variable_get('social_feed_auto_publish', ''),
    );
    $form['social_feed_passive_timeout'] = array(
      '#type' => 'textfield',
      '#title' => t('Minimum Cache Timeout'),
      '#default_value' => variable_get('social_feed_passive_timeout', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => 'Timeout in minutes before the site will request new data from Instagram',
    );
    $form['social_feed_block_count'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of Photos'),
      '#default_value' => variable_get('social_feed_block_count', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => 'Determines number of photos that display in the block this module provides',
    );
    $form['social_feed_search_type'] = array(
      '#type' => 'radios',
      '#title' => t('Instagram Feed Source'),
      '#default_value' => variable_get('social_feed_search_type', ''),
      '#options' => array(
        0 => t('User Feed'),
        1 => t('Hashtag'),
        2 => t("User's Own Photos"),
      ),
    );
    $form['social_feed_search_tag'] = array(
      '#type' => 'textfield',
      '#title' => t('Search term (if using hashtag)'),
      '#default_value' => variable_get('social_feed_search_tag', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => 'Exclude the preceding the # (hashtag), leave blank if not searching by hashtag',
    );
  }

  return system_settings_form($form);

}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function social_feed_block_info() {
  $blocks['social_feed_block'] = array(
    'info' => t('Social feed block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function social_feed_block_view($delta = '') {
  switch ($delta) {
    case 'social_feed_block':
      $block['subject'] = t('Instagram Social Feed');
      $block['content'] = social_feed_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function social_feed_contents($which_block, $panel_count = NULL) {
  switch ($which_block) {
    case 'social_feed_block':

      $timeout = variable_get('social_feed_passive_timeout', '');
      $timeout = intval($timeout) * 60;

      // Check if new data should be requested.
      if ($timeout > 0) {
        $time = variable_get('social_feed_last_run', time());
        if ((REQUEST_TIME - $time) > $timeout) {
          social_feed_cron();
        }
      }

      $query = db_select('social_instagram', 's')
        ->fields('s')
        ->condition('approve', 1)
        ->orderBy('id');

      if ($panel_count) {
        $limit = $panel_count;
      }
      else {
        $limit = variable_get('social_feed_block_count', 0);
      }
      $limit = intval($limit);
      if ($limit) {
        $query->range(0, $limit);
      }

      $results = $query->execute();

      $html = '';
      while ($row = $results->fetchAssoc()) {
        $html .= '<a href="' . $row['instagram_link'] . '">';
        $html .= '<img src="' . $row['thumbnail'] . '" />';
        $html .= '</a>';
      }

      $output = array(
        '#markup' => $html,
      );

      return $output;
  }
}


/**
 * Generate content for the custom panel pane.
 */
function social_feed_panel_pane_content($count = 6) {

  $block = social_feed_contents('social_feed_block', $count);
  return $block;
}

/**
 * Callback function for module info page.
 */
function social_status() {

  $text = variable_get('social_feed_search_tag', 'nofilter');
  $text = str_replace('#', '', $text);
  $type = variable_get('social_feed_search_type', 'Hashtag');

  if ($type == 1) {
    // Hashtag search.
    $text = "hashtag " . $text;
  }
  elseif ($type == 0) {
    // User feed.
    $text = "user feed";
  }
  else {
    // User photos.
    $text = "user's own photos";
  }

  $form = array();

  $form['description'] = array(
    '#markup' => 'This module is connected to the Instagram account: ' . variable_get('social_feed_username', '') .
      '<br><br>' .
      'The feed is currently configured to pull new photos from: ' . $text .
      '<br><br>' .
      'New photos will be requested on each cron run. Make sure cron is configured to run regularly.' .
      '<br><br>' .
      'To pull new photos manually, click Run below:' .
      '<br><br>'
  );

  $form['run'] = array(
    '#type' => 'submit',
    '#value' => 'Run',
    '#submit' => array('social_status_submit'),
  );

  return $form;

}

/*
 * Callback function for manually running an API request.
 */
function social_status_submit($form, &$form_state) {
    social_feed_cron();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function social_feed_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}
