<?php

/**
 * @file
 * Defines all hooks and helper functions.
 */

define('SOCIAL_FEED_USER_FEED', 0);
define('SOCIAL_FEED_HASHTAG', 1);
define('SOCIAL_FEED_USER_PHOTOS', 2);

/**
 * Implements hook_menu().
 */
function social_feed_menu() {

  $items['admin/config/services/social_feed/overview'] = array(
    'title' => 'Moderation',
    'description' => 'Approve new items for site display',
    'page callback' => 'social_overview',
    'access arguments' => array('administer social_feed settings'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/social_feed/settings'] = array(
    'title' => 'Manage settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_feed_settings'),
    'access arguments' => array('administer social_feed settings'),
  );

  $items['admin/config/services/social_feed/status'] = array(
    'title' => 'Status',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_status'),
    'access arguments' => array('administer social_feed settings'),
  );

  $items['ajax/social_approve'] = array(
    'title' => 'Social Approve',
    'page callback' => 'social_feed_approve',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/social_feed/delete'] = array(
    'title' => t('Delete photos'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_feed_delete_confirm'),
    'access arguments' => array('administer social_feed settings'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permissions().
 */
function social_feed_permission() {
  return array(
    'administer social_feed settings' => array(
      'title' => t('Administer Social Feed module settings'),
    ),
  );
}

/**
 * Callback function for Instagram display table.
 */
function social_overview($feed = NULL) {

  $api = variable_get('social_feed_api_key');
  if (!$api) {
    drupal_set_message('API Key not properly established. Please see the Manage Settings tab.', 'error');
  }

  drupal_add_js(drupal_get_path('module', 'social_feed') . '/js/social_feed.js');

  $header = array('Thumbnail', 'User', 'Caption', 'Timestamp', 'Publish?');

  $query = db_select('social_instagram', 's')
    ->fields('s', array())
    ->orderBy('instagram_id', 'DESC');
  $query = $query->extend('PagerDefault')->limit(100);

  $feed_id = arg(5);
  if (is_numeric($feed_id)) {
    $query->condition('feed_id', $feed_id, '=');
  }

  $results = $query->execute();
  $rows = array();
  while ($row = $results->fetch()) {

    $image_html = '<img src="' . $row->thumbnail . '" data-approved="' . $row->approve . '" />';

    $rows[] = array(
      l($image_html, $row->instagram_link, array(
        'html' => TRUE,
        'attributes' => array(
          'target' => '_blank'),
        )
      ),
      l($row->instagram_user, 'http://instagram.com/' . $row->instagram_user, array(
        'attributes' => array(
          'target' => '_blank'),
        )
      ),
      truncate_utf8($row->caption, 80, FALSE, TRUE),
      date('Y-m-d g:i a', $row->created_time),
      $row->instagram_id,
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => FALSE,
    'empty' => 'No photos yet',
  );

  $count = count($rows);
  $markup = '';
  if ($count > 0) {
    $markup = 'Click here to <a href="/admin/config/services/social_feed/delete">delete all photos</a>.';
  }

  $results = db_select('social_feeds_instagram', 's')
    ->fields('s', array())
    ->execute();

  $count = $results->rowCount();

  $feed_select = "";
  if ($count > 0) {
    $feed_select = "<select>";
    $feed_select .= '<option value="">All</option>';
    foreach ($results as $row) {
      $selected = ($feed == $row->id) ? 'selected' : '';
      $feed_select .= '<option value="' . $row->id . '" ' . $selected . '>' . $row->name . '</option>';
    }
    $feed_select .= "</select>";
  }

  return $feed_select . theme('table', $variables) . theme('pager');

}

/**
 * AJAX callback for approving individual photos.
 */
function social_feed_approve() {

  if (isset($_GET['instagram_id'])) {
    $id = $_GET['instagram_id'];
  }
  else {
    header("HTTP/1.1 500 Internal Server Error");
    exit();
  }

  $result = db_update('social_instagram')
    ->expression('approve', 'IF(approve=1, 0, 1)')
    ->condition('instagram_id', $id)
    ->execute();

}

/**
 * Send query to make CURL request to API.
 */
function api_call($query) {
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $query);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($curl, CURLOPT_TIMEOUT, 20);
  $result = curl_exec($curl);
  curl_close($curl);

  return $result;
}

/**
 * Implements hook_cron().
 */
function social_feed_cron() {

  $access_token = variable_get('social_feed_api_key');
  if (!$access_token) {
    drupal_set_message(t('Cron could not run because no access token has been created'), 'error');
    return;
  }

  // Select all feeds from the database.
  $result = db_select('social_feeds_instagram', 'f')
    ->fields('f')
    ->condition('enabled', 1, '=')
    ->execute();

  // For each record in the database:
  foreach ($result as $row) {

    $type = $row->feed_type;
    $feed_id = $row->id;

    // Hashtag search.
    if ($type == SOCIAL_FEED_HASHTAG) {
      $text = $row->search_term;
      $text = str_replace('#', '', $text);
      $instagram_query = "https://api.instagram.com/v1/tags/$text/media/recent?access_token=$access_token";
      $text = "Instagram feed: hashtag " . $text;
    }
    // User feed.
    elseif ($type == SOCIAL_FEED_USER_FEED) {
      $instagram_query = "https://api.instagram.com/v1/users/self/feed?access_token=$access_token";
      $text = "Instagram feed: user feed";
    }
    // User photos.
    else {
      $uid = variable_get('social_feed_user_id', 0);
      $instagram_query = "https://api.instagram.com/v1/users/" . $uid . "/media/recent?access_token=$access_token";
      $text = "Instagram feed: user's own photos";
    }

    $total = 0;
    $instagram_feed = json_decode(api_call($instagram_query));

    $table = 'social_instagram';
    if (!isset($instagram_feed->data)) {
      return t('%text No items found.', array('%text' => $text));
    }

    foreach ($instagram_feed->data as $feed) {
      // Check if instagram photo already exists based on unix timestamp.
      $sql = "SELECT instagram_id FROM {$table} WHERE instagram_id = '{$feed->id}'";
      $result = db_query($sql);
      $count = $result->rowCount();
      if ($count) {
        continue;
      }

      // Return tags as comma delimited string.
      $tags = implode(',', $feed->tags);

      $caption = '';
      if (isset($feed->caption->text)) {
        $caption = utf8_encode($feed->caption->text);
      }

      $data = array(
        'feed_id' => $feed_id,
        'user_id' => $feed->user->id,
        'tags' => filter_xss($tags),
        // Time stored in unix epoch format.
        'created_time' => $feed->created_time,
        'low_resolution' => $feed->images->low_resolution->url,
        'thumbnail' => $feed->images->thumbnail->url,
        'standard_resolution' => $feed->images->standard_resolution->url,
        'caption' => filter_xss($caption),
        'instagram_id' => $feed->id,
        'instagram_link' => $feed->link,
        'instagram_user' => $feed->user->username,
        'approve' => variable_get('social_feed_auto_publish', 0),
      );

      // Insert data into table.
      $result = db_insert($table)->fields($data)->execute();
      $total++;

    }

    $message = t('%text %total items imported.', array(
      '%text' => $text,
      '%total' => $total,
    ));

    drupal_set_message($message);
    watchdog(__FUNCTION__, $message);
  }

  // Set last run variable for passive updating.
  variable_set('social_feed_last_run', time());

}

/**
 * Callback function for settings form.
 */
function social_feed_settings() {

  $access_key = variable_get('social_feed_api_key', '');
  // Access token request in process.
  if (isset($_GET['code']) && $_GET['code'] != '') {
    if ($access_key == '') {
      $url = "https://api.instagram.com/oauth/access_token";
      $fields = array(
        "client_id" => variable_get("social_feed_client_id"),
        "client_secret" => variable_get("social_feed_client_secret"),
        "grant_type" => "authorization_code",
        "redirect_uri" => variable_get("social_feed_redirect_uri"),
        "code" => $_GET['code'],
      );

      $fields_string = '';
      foreach ($fields as $key => $value) {
        $fields_string .= $key . '=' . $value . '&';
      }
      rtrim($fields_string, '&');

      // Request access token.
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POST, count($fields));
      curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);

      $output = curl_exec($ch);
      curl_close($ch);

      $auth = json_decode($output);

      if (empty($auth->error_message)) {
        variable_set('social_feed_api_key', $auth->access_token);
        variable_set('social_feed_user_id', $auth->user->id);
        variable_set('social_feed_username', $auth->user->username);

        $access_key = $auth->access_token;
      }
      else {
        drupal_set_message($auth->error_message, 'error');
      }
    }
  }
  else if ($_GET['code'] == '') {
      // Remove api key for re-authentication.
      variable_del('social_feed_api_key');
      // Unset variable for form.
      $access_key = '';
  }

  $form = array();
  if ($access_key == '') {

    // Non-authenticated settings form.
    $form['social_feed_client_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram Client ID'),
      '#default_value' => variable_get('social_feed_client_id', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => t('You must register an Instagram client key to use this module. You can register a client by <a href="http://instagram.com/developer/clients/manage/" target="_blank">clicking here</a>.'),
    );
    $form['social_feed_client_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram Client Secret'),
      '#default_value' => variable_get('social_feed_client_secret', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => t('The client secret can be found after creating an Instagram client in the API console.'),
    );
    $form['social_feed_redirect_uri'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram Redirect URI'),
      '#default_value' => variable_get('social_feed_redirect_uri', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => t('Set the redirect URI to :url', array(
        ':url' => 'http://' . $_SERVER['SERVER_NAME'] . '/admin/config/services/social_feed/settings',
      )),
    );

    if (variable_get('social_feed_client_id', '') != '' && variable_get('social_feed_redirect_uri', '') != '') {
      $form['authenticate'] = array(
        '#markup' => l(t('Click here to authenticate via Instagram and create an access token'),
          'https://api.instagram.com/oauth/authorize/?client_id=' . variable_get('social_feed_client_id') . '&redirect_uri=' . variable_get('social_feed_redirect_uri') . '&response_type=code'
        )
      );
    }
  }
  else {

    // Authenticated user settings form.
    $form['social_feed_api_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Instagram API Key'),
      '#default_value' => variable_get('social_feed_api_key', ''),
      '#size' => 60,
      '#maxlength' => 255,
      '#disabled' => TRUE,
      '#description' => t('Stored access key for accessing the API key'),
    );
    $form['authenticate'] = array(
      '#markup' => l(t('Click here to remove the access key and re-authenticate via Instagram'),
        'admin/config/services/social_feed/settings/', array(
          'query' => array('code' => ''),
        )
      ),
    );
  }

  return system_settings_form($form);

}

/**
 * Implements hook_block_info().
 */
function social_feed_block_info() {
  $blocks['social_feed_block'] = array(
    'info' => t('Social feed block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function social_feed_block_view($delta = '') {
  switch ($delta) {
    case 'social_feed_block':
      $block['subject'] = t('Instagram Social Feed');
      $block['content'] = social_feed_contents($delta, social_feed_get_contents);
      return $block;
  }
}


/**
 * Public function to get Instagram information from the database.
 *
 * @return DatabaseStatementInterface|null
 *   Database results.
 */
function social_feed_get_contents() {
  $timeout = variable_get('social_feed_passive_timeout', '');
  $timeout = intval($timeout) * 60;

  // Check if new data should be requested.
  if ($timeout > 0) {
    $time = variable_get('social_feed_last_run', time());
    if ((REQUEST_TIME - $time) > $timeout) {
      social_feed_cron();
    }
  }

  $query = db_select('social_instagram', 's')
    ->fields('s')
    ->condition('approve', 1)
    ->orderBy('created_time', 'DESC');

  $limit = variable_get('social_feed_block_count', 0);
  $limit = intval($limit);
  if ($limit) {
    $query->range(0, $limit);
  }

  $results = $query->execute();
  return $results;
}

/**
 * A module-defined block content function.
 */
function social_feed_contents($which_block, $results) {
  switch ($which_block) {
    case 'social_feed_block':

      $count = 1;
      $total = $results->rowCount();
      $html = array();
      $html[] = '<div class="instagram-social-feed">';
      $html[] = '<ul class="clearfix">';
      while ($row = $results->fetchAssoc()) {
        $classes = array(
          'social-feed-item',
          'social-feed-item-' . $count,
        );
        if ($count % 2 == 0) {
          $classes[] = 'social-feed-item-even';
        }
        else {
          $classes[] = 'social-feed-item-odd';
        }
        if ($count == 1) {
          $classes[] = 'social-feed-item-first';
        }
        if ($count == $total) {
          $classes[] = 'social-feed-item-last';
        }
        $html[] = '<li class="' . implode(' ', $classes) . '">';
        $html[] = '<a href="' . $row['instagram_link'] . '" target="_blank">';
        $html[] = '<img src="' . $row['low_resolution'];
        $html[] = '" width="180" height="180" alt="' . $row['caption'] . '" />';
        $html[] = '</a>';
        $html[] = '</li>';
        $count++;
        }
      $html[] = '</ul>';
      $link_uri = variable_get('social_feed_more_uri', '');
      if ($link_uri != '') {
        $link_txt = variable_get('social_feed_more_uri', 'More');
        $html[] = l($link_txt, $link_uri, array('attributes' => array('class' => array('social-feed-link'))));
      }
      $html[] = '</div>';

      $output = array(
       '#markup' => implode('', $html),
      );

      return $output;
  }
}


/**
 * Build database query for panel pane options and return the result.
 */
function social_feed_panel_pane_results($options = array()) {

  $result = db_select('social_instagram', 's')
    ->fields('s')
    ->condition('feed_id', $options['feed'], '=')
    ->range(0, $options['count'])
    ->execute();

  return $result;
}

/**
 * Generate content for the custom panel pane.
 */
function social_feed_panel_pane_content($options = array()) {

  $block = social_feed_contents('social_feed_block', social_feed_panel_pane_results($options));
  return $block;
}

/**
 * Callback function for module info page.
 */
function social_status() {

  $type = variable_get('social_feed_search_type', 0);

  // Hashtag search.
  if ($type == SOCIAL_FEED_HASHTAG) {
    $text = variable_get('social_feed_search_tag', 'nofilter');
    $text = str_replace('#', '', $text);
    $text = "hashtag " . $text;
  }
  // User feed.
  elseif ($type == SOCIAL_FEED_USER_FEED) {
    $text = "user feed";
  }
  // User photos.
  else {
    $text = "user's own photos";
  }

  $api = variable_get('social_feed_api_key');
  if (!$api) {
    drupal_set_message('API Key not properly established. Please see the Manage Settings tab.', 'error');
  }

  $message = array(
    'This module is connected to the Instagram account: ',
    variable_get('social_feed_username', ''),
    '<br /><br />',
    'New photos will be requested on each cron run. Make sure cron is configured to run regularly.',
    '<br /><br />',
    'To pull new photos manually, click Run below:<br /><br />',
  );

  $form = array();
  $form['description'] = array(
    '#markup' => implode('', $message),
  );

  $form['run'] = array(
    '#type' => 'submit',
    '#value' => 'Run',
    '#submit' => array('social_status_submit'),
  );

  $results = db_select('social_instagram', 's')->fields('s')->execute();
  $count = $results->rowCount();

  if ($count > 0) {
    $form['delete'] = array(
      '#markup' => '<p>Click here to <a href="/admin/config/services/social_feed/delete">delete all photos</a>.</p>',
    );
  }

  return $form;

}

/**
 * Callback function for manually running an API request.
 */
function social_status_submit($form, &$form_state) {
  social_feed_cron();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function social_feed_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
  if ($plugin_type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Delete all photos confirmation.
 */
function social_feed_delete_confirm($form, &$form_state) {
  $form = array();
  return confirm_form($form, t('Are you sure you want to delete all photos?'),
    'admin/config/services/social_feed', t('This action cannot be undone.'), t('Delete'),
    t('Cancel')
  );
}

/**
 * Delete all photos confirm submit.
 */
function social_feed_delete_confirm_submit($form, &$form_state) {
  $form_values = $form_state['values'];

  if ($form_values['confirm']) {
    $num_deleted = db_delete('social_instagram')
      ->execute();
    drupal_set_message(t('Successfully deleted :num photos.', array(
      ':num' => $num_deleted,
    )));
  }

  drupal_goto("admin/config/services/social_feed");
}
